// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\src\app\(app)\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\(app)\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ..\..\src\app\(app)\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\(app)\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\(auth)\sign-in\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\(auth)\\sign-in\\page.js")
  handler satisfies AppPageConfig<"/sign-in">
}

// Validate ..\..\src\app\(auth)\sign-up\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\(auth)\\sign-up\\page.js")
  handler satisfies AppPageConfig<"/sign-up">
}

// Validate ..\..\src\app\(auth)\verify\[username]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\(auth)\\verify\\[username]\\page.js")
  handler satisfies AppPageConfig<"/verify/[username]">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\u\[usernmae]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\u\\[usernmae]\\page.js")
  handler satisfies AppPageConfig<"/u/[usernmae]">
}

// Validate ..\..\src\app\api\accept-messages\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\accept-messages\\route.js")
  handler satisfies RouteHandlerConfig<"/api/accept-messages">
}

// Validate ..\..\src\app\api\check-username-unique\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\check-username-unique\\route.js")
  handler satisfies RouteHandlerConfig<"/api/check-username-unique">
}

// Validate ..\..\src\app\api\get-messages\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\get-messages\\route.js")
  handler satisfies RouteHandlerConfig<"/api/get-messages">
}

// Validate ..\..\src\app\api\send-message\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\send-message\\route.js")
  handler satisfies RouteHandlerConfig<"/api/send-message">
}

// Validate ..\..\src\app\api\sign-up\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\sign-up\\route.js")
  handler satisfies RouteHandlerConfig<"/api/sign-up">
}

// Validate ..\..\src\app\api\verify-code\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\verify-code\\route.js")
  handler satisfies RouteHandlerConfig<"/api/verify-code">
}





// Validate ..\..\src\app\(app)\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\(app)\\layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
